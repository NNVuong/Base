// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MVC
{
    public partial class MfrDbContextModel
    {
        partial void Initialize()
        {
            var campus = CampusEntityType.Create(this);
            var category = CategoryEntityType.Create(this);
            var categoryDetails = CategoryDetailsEntityType.Create(this);
            var role = RoleEntityType.Create(this);
            var user = UserEntityType.Create(this);
            var userCampus = UserCampusEntityType.Create(this);
            var userRole = UserRoleEntityType.Create(this);

            CategoryDetailsEntityType.CreateForeignKey1(categoryDetails, category);
            UserCampusEntityType.CreateForeignKey1(userCampus, campus);
            UserCampusEntityType.CreateForeignKey2(userCampus, user);
            UserRoleEntityType.CreateForeignKey1(userRole, role);
            UserRoleEntityType.CreateForeignKey2(userRole, user);

            CampusEntityType.CreateAnnotations(campus);
            CategoryEntityType.CreateAnnotations(category);
            CategoryDetailsEntityType.CreateAnnotations(categoryDetails);
            RoleEntityType.CreateAnnotations(role);
            UserEntityType.CreateAnnotations(user);
            UserCampusEntityType.CreateAnnotations(userCampus);
            UserRoleEntityType.CreateAnnotations(userRole);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var campus = FindEntityType("DataBase.Entities.Campus")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            campus.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var dataBaseEntitiesCampusTableBase = new TableBase("DataBase.Entities.Campus", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("Code", "nvarchar(max)", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("Code", codeColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("Id", idColumnBase);
            var isDeletedColumnBase = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("IsDeleted", isDeletedColumnBase);
            var modifiedAtColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase);
            var modifiedByColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseEntitiesCampusTableBase);
            dataBaseEntitiesCampusTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("DataBase.Entities.Campus", dataBaseEntitiesCampusTableBase);
            var dataBaseEntitiesCampusMappingBase = new TableMappingBase<ColumnMappingBase>(campus, dataBaseEntitiesCampusTableBase, true);
            dataBaseEntitiesCampusTableBase.AddTypeMapping(dataBaseEntitiesCampusMappingBase, false);
            defaultTableMappings.Add(dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, campus.FindProperty("Id")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, campus.FindProperty("Code")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, campus.FindProperty("CreatedAt")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, campus.FindProperty("CreatedBy")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase, campus.FindProperty("IsDeleted")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase, campus.FindProperty("ModifiedAt")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase, campus.FindProperty("ModifiedBy")!, dataBaseEntitiesCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, campus.FindProperty("Name")!, dataBaseEntitiesCampusMappingBase);

            var tableMappings = new List<TableMapping>();
            campus.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var campusTable = new Table("Campus", null, relationalModel);
            var idColumn = new Column("Id", "uniqueidentifier", campusTable);
            campusTable.Columns.Add("Id", idColumn);
            var codeColumn = new Column("Code", "nvarchar(max)", campusTable);
            campusTable.Columns.Add("Code", codeColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", campusTable);
            campusTable.Columns.Add("CreatedAt", createdAtColumn);
            var createdByColumn = new Column("CreatedBy", "uniqueidentifier", campusTable);
            campusTable.Columns.Add("CreatedBy", createdByColumn);
            var isDeletedColumn = new Column("IsDeleted", "bit", campusTable);
            campusTable.Columns.Add("IsDeleted", isDeletedColumn);
            var modifiedAtColumn = new Column("ModifiedAt", "datetime2", campusTable);
            campusTable.Columns.Add("ModifiedAt", modifiedAtColumn);
            var modifiedByColumn = new Column("ModifiedBy", "uniqueidentifier", campusTable);
            campusTable.Columns.Add("ModifiedBy", modifiedByColumn);
            var nameColumn = new Column("Name", "nvarchar(max)", campusTable);
            campusTable.Columns.Add("Name", nameColumn);
            var pK_Campus = new UniqueConstraint("PK_Campus", campusTable, new[] { idColumn });
            campusTable.PrimaryKey = pK_Campus;
            var pK_CampusUc = RelationalModel.GetKey(this,
                "DataBase.Entities.Campus",
                new[] { "Id" });
            pK_Campus.MappedKeys.Add(pK_CampusUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CampusUc).Add(pK_Campus);
            campusTable.UniqueConstraints.Add("PK_Campus", pK_Campus);
            relationalModel.Tables.Add(("Campus", null), campusTable);
            var campusTableMapping = new TableMapping(campus, campusTable, true);
            campusTable.AddTypeMapping(campusTableMapping, false);
            tableMappings.Add(campusTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, campus.FindProperty("Id")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, campus.FindProperty("Code")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, campus.FindProperty("CreatedAt")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, campus.FindProperty("CreatedBy")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn, campus.FindProperty("IsDeleted")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn, campus.FindProperty("ModifiedAt")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn, campus.FindProperty("ModifiedBy")!, campusTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, campus.FindProperty("Name")!, campusTableMapping);

            var category = FindEntityType("DataBase.Entities.Category")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var dataBaseEntitiesCategoryTableBase = new TableBase("DataBase.Entities.Category", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("Id", idColumnBase0);
            var isDeletedColumnBase0 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("IsDeleted", isDeletedColumnBase0);
            var modifiedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase0);
            var modifiedByColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseEntitiesCategoryTableBase);
            dataBaseEntitiesCategoryTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("DataBase.Entities.Category", dataBaseEntitiesCategoryTableBase);
            var dataBaseEntitiesCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, dataBaseEntitiesCategoryTableBase, true);
            dataBaseEntitiesCategoryTableBase.AddTypeMapping(dataBaseEntitiesCategoryMappingBase, false);
            defaultTableMappings0.Add(dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, category.FindProperty("Id")!, dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, category.FindProperty("CreatedAt")!, dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, category.FindProperty("CreatedBy")!, dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase0, category.FindProperty("IsDeleted")!, dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase0, category.FindProperty("ModifiedAt")!, dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase0, category.FindProperty("ModifiedBy")!, dataBaseEntitiesCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, category.FindProperty("Name")!, dataBaseEntitiesCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var categoryTable = new Table("Category", null, relationalModel);
            var idColumn0 = new Column("Id", "uniqueidentifier", categoryTable);
            categoryTable.Columns.Add("Id", idColumn0);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", categoryTable);
            categoryTable.Columns.Add("CreatedAt", createdAtColumn0);
            var createdByColumn0 = new Column("CreatedBy", "uniqueidentifier", categoryTable);
            categoryTable.Columns.Add("CreatedBy", createdByColumn0);
            var isDeletedColumn0 = new Column("IsDeleted", "bit", categoryTable);
            categoryTable.Columns.Add("IsDeleted", isDeletedColumn0);
            var modifiedAtColumn0 = new Column("ModifiedAt", "datetime2", categoryTable);
            categoryTable.Columns.Add("ModifiedAt", modifiedAtColumn0);
            var modifiedByColumn0 = new Column("ModifiedBy", "uniqueidentifier", categoryTable);
            categoryTable.Columns.Add("ModifiedBy", modifiedByColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(max)", categoryTable);
            categoryTable.Columns.Add("Name", nameColumn0);
            var pK_Category = new UniqueConstraint("PK_Category", categoryTable, new[] { idColumn0 });
            categoryTable.PrimaryKey = pK_Category;
            var pK_CategoryUc = RelationalModel.GetKey(this,
                "DataBase.Entities.Category",
                new[] { "Id" });
            pK_Category.MappedKeys.Add(pK_CategoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoryUc).Add(pK_Category);
            categoryTable.UniqueConstraints.Add("PK_Category", pK_Category);
            relationalModel.Tables.Add(("Category", null), categoryTable);
            var categoryTableMapping = new TableMapping(category, categoryTable, true);
            categoryTable.AddTypeMapping(categoryTableMapping, false);
            tableMappings0.Add(categoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, category.FindProperty("Id")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, category.FindProperty("CreatedAt")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, category.FindProperty("CreatedBy")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn0, category.FindProperty("IsDeleted")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn0, category.FindProperty("ModifiedAt")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn0, category.FindProperty("ModifiedBy")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, category.FindProperty("Name")!, categoryTableMapping);

            var categoryDetails = FindEntityType("DataBase.Entities.CategoryDetails")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            categoryDetails.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var dataBaseEntitiesCategoryDetailsTableBase = new TableBase("DataBase.Entities.CategoryDetails", null, relationalModel);
            var categoryIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoryId", "uniqueidentifier", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("CategoryId", categoryIdColumnBase);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var createdByColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("CreatedBy", createdByColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("Id", idColumnBase1);
            var isDeletedColumnBase1 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("IsDeleted", isDeletedColumnBase1);
            var modifiedAtColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase1);
            var modifiedByColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseEntitiesCategoryDetailsTableBase);
            dataBaseEntitiesCategoryDetailsTableBase.Columns.Add("Name", nameColumnBase1);
            relationalModel.DefaultTables.Add("DataBase.Entities.CategoryDetails", dataBaseEntitiesCategoryDetailsTableBase);
            var dataBaseEntitiesCategoryDetailsMappingBase = new TableMappingBase<ColumnMappingBase>(categoryDetails, dataBaseEntitiesCategoryDetailsTableBase, true);
            dataBaseEntitiesCategoryDetailsTableBase.AddTypeMapping(dataBaseEntitiesCategoryDetailsMappingBase, false);
            defaultTableMappings1.Add(dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, categoryDetails.FindProperty("Id")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase, categoryDetails.FindProperty("CategoryId")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, categoryDetails.FindProperty("CreatedAt")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase1, categoryDetails.FindProperty("CreatedBy")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase1, categoryDetails.FindProperty("IsDeleted")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase1, categoryDetails.FindProperty("ModifiedAt")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase1, categoryDetails.FindProperty("ModifiedBy")!, dataBaseEntitiesCategoryDetailsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, categoryDetails.FindProperty("Name")!, dataBaseEntitiesCategoryDetailsMappingBase);

            var tableMappings1 = new List<TableMapping>();
            categoryDetails.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var categoryDetailsTable = new Table("CategoryDetails", null, relationalModel);
            var idColumn1 = new Column("Id", "uniqueidentifier", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("Id", idColumn1);
            var categoryIdColumn = new Column("CategoryId", "uniqueidentifier", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("CategoryId", categoryIdColumn);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("CreatedAt", createdAtColumn1);
            var createdByColumn1 = new Column("CreatedBy", "uniqueidentifier", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("CreatedBy", createdByColumn1);
            var isDeletedColumn1 = new Column("IsDeleted", "bit", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("IsDeleted", isDeletedColumn1);
            var modifiedAtColumn1 = new Column("ModifiedAt", "datetime2", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("ModifiedAt", modifiedAtColumn1);
            var modifiedByColumn1 = new Column("ModifiedBy", "uniqueidentifier", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("ModifiedBy", modifiedByColumn1);
            var nameColumn1 = new Column("Name", "nvarchar(max)", categoryDetailsTable);
            categoryDetailsTable.Columns.Add("Name", nameColumn1);
            var pK_CategoryDetails = new UniqueConstraint("PK_CategoryDetails", categoryDetailsTable, new[] { idColumn1 });
            categoryDetailsTable.PrimaryKey = pK_CategoryDetails;
            var pK_CategoryDetailsUc = RelationalModel.GetKey(this,
                "DataBase.Entities.CategoryDetails",
                new[] { "Id" });
            pK_CategoryDetails.MappedKeys.Add(pK_CategoryDetailsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoryDetailsUc).Add(pK_CategoryDetails);
            categoryDetailsTable.UniqueConstraints.Add("PK_CategoryDetails", pK_CategoryDetails);
            var iX_CategoryDetails_CategoryId = new TableIndex(
            "IX_CategoryDetails_CategoryId", categoryDetailsTable, new[] { categoryIdColumn }, false);
            var iX_CategoryDetails_CategoryIdIx = RelationalModel.GetIndex(this,
                "DataBase.Entities.CategoryDetails",
                new[] { "CategoryId" });
            iX_CategoryDetails_CategoryId.MappedIndexes.Add(iX_CategoryDetails_CategoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CategoryDetails_CategoryIdIx).Add(iX_CategoryDetails_CategoryId);
            categoryDetailsTable.Indexes.Add("IX_CategoryDetails_CategoryId", iX_CategoryDetails_CategoryId);
            relationalModel.Tables.Add(("CategoryDetails", null), categoryDetailsTable);
            var categoryDetailsTableMapping = new TableMapping(categoryDetails, categoryDetailsTable, true);
            categoryDetailsTable.AddTypeMapping(categoryDetailsTableMapping, false);
            tableMappings1.Add(categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, categoryDetails.FindProperty("Id")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn, categoryDetails.FindProperty("CategoryId")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, categoryDetails.FindProperty("CreatedAt")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn1, categoryDetails.FindProperty("CreatedBy")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn1, categoryDetails.FindProperty("IsDeleted")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn1, categoryDetails.FindProperty("ModifiedAt")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn1, categoryDetails.FindProperty("ModifiedBy")!, categoryDetailsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, categoryDetails.FindProperty("Name")!, categoryDetailsTableMapping);

            var role = FindEntityType("DataBase.Entities.Role")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            role.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var dataBaseEntitiesRoleTableBase = new TableBase("DataBase.Entities.Role", null, relationalModel);
            var createdAtColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("CreatedAt", createdAtColumnBase2);
            var createdByColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("CreatedBy", createdByColumnBase2);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("Id", idColumnBase2);
            var isDeletedColumnBase2 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("IsDeleted", isDeletedColumnBase2);
            var modifiedAtColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase2);
            var modifiedByColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase2);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseEntitiesRoleTableBase);
            dataBaseEntitiesRoleTableBase.Columns.Add("Name", nameColumnBase2);
            relationalModel.DefaultTables.Add("DataBase.Entities.Role", dataBaseEntitiesRoleTableBase);
            var dataBaseEntitiesRoleMappingBase = new TableMappingBase<ColumnMappingBase>(role, dataBaseEntitiesRoleTableBase, true);
            dataBaseEntitiesRoleTableBase.AddTypeMapping(dataBaseEntitiesRoleMappingBase, false);
            defaultTableMappings2.Add(dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, role.FindProperty("Id")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase2, role.FindProperty("CreatedAt")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase2, role.FindProperty("CreatedBy")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, role.FindProperty("Description")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase2, role.FindProperty("IsDeleted")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase2, role.FindProperty("ModifiedAt")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase2, role.FindProperty("ModifiedBy")!, dataBaseEntitiesRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, role.FindProperty("Name")!, dataBaseEntitiesRoleMappingBase);

            var tableMappings2 = new List<TableMapping>();
            role.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var roleTable = new Table("Role", null, relationalModel);
            var idColumn2 = new Column("Id", "uniqueidentifier", roleTable);
            roleTable.Columns.Add("Id", idColumn2);
            var createdAtColumn2 = new Column("CreatedAt", "datetime2", roleTable);
            roleTable.Columns.Add("CreatedAt", createdAtColumn2);
            var createdByColumn2 = new Column("CreatedBy", "uniqueidentifier", roleTable);
            roleTable.Columns.Add("CreatedBy", createdByColumn2);
            var descriptionColumn = new Column("Description", "nvarchar(max)", roleTable);
            roleTable.Columns.Add("Description", descriptionColumn);
            var isDeletedColumn2 = new Column("IsDeleted", "bit", roleTable);
            roleTable.Columns.Add("IsDeleted", isDeletedColumn2);
            var modifiedAtColumn2 = new Column("ModifiedAt", "datetime2", roleTable);
            roleTable.Columns.Add("ModifiedAt", modifiedAtColumn2);
            var modifiedByColumn2 = new Column("ModifiedBy", "uniqueidentifier", roleTable);
            roleTable.Columns.Add("ModifiedBy", modifiedByColumn2);
            var nameColumn2 = new Column("Name", "nvarchar(max)", roleTable);
            roleTable.Columns.Add("Name", nameColumn2);
            var pK_Role = new UniqueConstraint("PK_Role", roleTable, new[] { idColumn2 });
            roleTable.PrimaryKey = pK_Role;
            var pK_RoleUc = RelationalModel.GetKey(this,
                "DataBase.Entities.Role",
                new[] { "Id" });
            pK_Role.MappedKeys.Add(pK_RoleUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RoleUc).Add(pK_Role);
            roleTable.UniqueConstraints.Add("PK_Role", pK_Role);
            relationalModel.Tables.Add(("Role", null), roleTable);
            var roleTableMapping = new TableMapping(role, roleTable, true);
            roleTable.AddTypeMapping(roleTableMapping, false);
            tableMappings2.Add(roleTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, role.FindProperty("Id")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn2, role.FindProperty("CreatedAt")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn2, role.FindProperty("CreatedBy")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, role.FindProperty("Description")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn2, role.FindProperty("IsDeleted")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn2, role.FindProperty("ModifiedAt")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn2, role.FindProperty("ModifiedBy")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, role.FindProperty("Name")!, roleTableMapping);

            var user = FindEntityType("DataBase.Entities.User")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var dataBaseEntitiesUserTableBase = new TableBase("DataBase.Entities.User", null, relationalModel);
            var createdAtColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("CreatedAt", createdAtColumnBase3);
            var createdByColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("CreatedBy", createdByColumnBase3);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(max)", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("Id", idColumnBase3);
            var isDeletedColumnBase3 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("IsDeleted", isDeletedColumnBase3);
            var modifiedAtColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase3);
            var modifiedByColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase3);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseEntitiesUserTableBase);
            dataBaseEntitiesUserTableBase.Columns.Add("Name", nameColumnBase3);
            relationalModel.DefaultTables.Add("DataBase.Entities.User", dataBaseEntitiesUserTableBase);
            var dataBaseEntitiesUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, dataBaseEntitiesUserTableBase, true);
            dataBaseEntitiesUserTableBase.AddTypeMapping(dataBaseEntitiesUserMappingBase, false);
            defaultTableMappings3.Add(dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, user.FindProperty("Id")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase3, user.FindProperty("CreatedAt")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase3, user.FindProperty("CreatedBy")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, user.FindProperty("Email")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase3, user.FindProperty("IsDeleted")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase3, user.FindProperty("ModifiedAt")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase3, user.FindProperty("ModifiedBy")!, dataBaseEntitiesUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, user.FindProperty("Name")!, dataBaseEntitiesUserMappingBase);

            var tableMappings3 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var userTable = new Table("User", null, relationalModel);
            var idColumn3 = new Column("Id", "uniqueidentifier", userTable);
            userTable.Columns.Add("Id", idColumn3);
            var createdAtColumn3 = new Column("CreatedAt", "datetime2", userTable);
            userTable.Columns.Add("CreatedAt", createdAtColumn3);
            var createdByColumn3 = new Column("CreatedBy", "uniqueidentifier", userTable);
            userTable.Columns.Add("CreatedBy", createdByColumn3);
            var emailColumn = new Column("Email", "nvarchar(max)", userTable);
            userTable.Columns.Add("Email", emailColumn);
            var isDeletedColumn3 = new Column("IsDeleted", "bit", userTable);
            userTable.Columns.Add("IsDeleted", isDeletedColumn3);
            var modifiedAtColumn3 = new Column("ModifiedAt", "datetime2", userTable);
            userTable.Columns.Add("ModifiedAt", modifiedAtColumn3);
            var modifiedByColumn3 = new Column("ModifiedBy", "uniqueidentifier", userTable);
            userTable.Columns.Add("ModifiedBy", modifiedByColumn3);
            var nameColumn3 = new Column("Name", "nvarchar(max)", userTable);
            userTable.Columns.Add("Name", nameColumn3);
            var pK_User = new UniqueConstraint("PK_User", userTable, new[] { idColumn3 });
            userTable.PrimaryKey = pK_User;
            var pK_UserUc = RelationalModel.GetKey(this,
                "DataBase.Entities.User",
                new[] { "Id" });
            pK_User.MappedKeys.Add(pK_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserUc).Add(pK_User);
            userTable.UniqueConstraints.Add("PK_User", pK_User);
            relationalModel.Tables.Add(("User", null), userTable);
            var userTableMapping = new TableMapping(user, userTable, true);
            userTable.AddTypeMapping(userTableMapping, false);
            tableMappings3.Add(userTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, user.FindProperty("Id")!, userTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn3, user.FindProperty("CreatedAt")!, userTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn3, user.FindProperty("CreatedBy")!, userTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, user.FindProperty("Email")!, userTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn3, user.FindProperty("IsDeleted")!, userTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn3, user.FindProperty("ModifiedAt")!, userTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn3, user.FindProperty("ModifiedBy")!, userTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, user.FindProperty("Name")!, userTableMapping);

            var userCampus = FindEntityType("DataBase.Entities.UserCampus")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            userCampus.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var dataBaseEntitiesUserCampusTableBase = new TableBase("DataBase.Entities.UserCampus", null, relationalModel);
            var campusIdColumnBase = new ColumnBase<ColumnMappingBase>("CampusId", "uniqueidentifier", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("CampusId", campusIdColumnBase);
            var createdAtColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("CreatedAt", createdAtColumnBase4);
            var createdByColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("CreatedBy", createdByColumnBase4);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("Id", idColumnBase4);
            var isDeletedColumnBase4 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("IsDeleted", isDeletedColumnBase4);
            var modifiedAtColumnBase4 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase4);
            var modifiedByColumnBase4 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase4);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "uniqueidentifier", dataBaseEntitiesUserCampusTableBase);
            dataBaseEntitiesUserCampusTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("DataBase.Entities.UserCampus", dataBaseEntitiesUserCampusTableBase);
            var dataBaseEntitiesUserCampusMappingBase = new TableMappingBase<ColumnMappingBase>(userCampus, dataBaseEntitiesUserCampusTableBase, true);
            dataBaseEntitiesUserCampusTableBase.AddTypeMapping(dataBaseEntitiesUserCampusMappingBase, false);
            defaultTableMappings4.Add(dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, userCampus.FindProperty("Id")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)campusIdColumnBase, userCampus.FindProperty("CampusId")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase4, userCampus.FindProperty("CreatedAt")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase4, userCampus.FindProperty("CreatedBy")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase4, userCampus.FindProperty("IsDeleted")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase4, userCampus.FindProperty("ModifiedAt")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase4, userCampus.FindProperty("ModifiedBy")!, dataBaseEntitiesUserCampusMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, userCampus.FindProperty("UserId")!, dataBaseEntitiesUserCampusMappingBase);

            var tableMappings4 = new List<TableMapping>();
            userCampus.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var userCampusTable = new Table("UserCampus", null, relationalModel);
            var idColumn4 = new Column("Id", "uniqueidentifier", userCampusTable);
            userCampusTable.Columns.Add("Id", idColumn4);
            var campusIdColumn = new Column("CampusId", "uniqueidentifier", userCampusTable);
            userCampusTable.Columns.Add("CampusId", campusIdColumn);
            var createdAtColumn4 = new Column("CreatedAt", "datetime2", userCampusTable);
            userCampusTable.Columns.Add("CreatedAt", createdAtColumn4);
            var createdByColumn4 = new Column("CreatedBy", "uniqueidentifier", userCampusTable);
            userCampusTable.Columns.Add("CreatedBy", createdByColumn4);
            var isDeletedColumn4 = new Column("IsDeleted", "bit", userCampusTable);
            userCampusTable.Columns.Add("IsDeleted", isDeletedColumn4);
            var modifiedAtColumn4 = new Column("ModifiedAt", "datetime2", userCampusTable);
            userCampusTable.Columns.Add("ModifiedAt", modifiedAtColumn4);
            var modifiedByColumn4 = new Column("ModifiedBy", "uniqueidentifier", userCampusTable);
            userCampusTable.Columns.Add("ModifiedBy", modifiedByColumn4);
            var userIdColumn = new Column("UserId", "uniqueidentifier", userCampusTable);
            userCampusTable.Columns.Add("UserId", userIdColumn);
            var pK_UserCampus = new UniqueConstraint("PK_UserCampus", userCampusTable, new[] { idColumn4 });
            userCampusTable.PrimaryKey = pK_UserCampus;
            var pK_UserCampusUc = RelationalModel.GetKey(this,
                "DataBase.Entities.UserCampus",
                new[] { "Id" });
            pK_UserCampus.MappedKeys.Add(pK_UserCampusUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserCampusUc).Add(pK_UserCampus);
            userCampusTable.UniqueConstraints.Add("PK_UserCampus", pK_UserCampus);
            var iX_UserCampus_CampusId = new TableIndex(
            "IX_UserCampus_CampusId", userCampusTable, new[] { campusIdColumn }, false);
            var iX_UserCampus_CampusIdIx = RelationalModel.GetIndex(this,
                "DataBase.Entities.UserCampus",
                new[] { "CampusId" });
            iX_UserCampus_CampusId.MappedIndexes.Add(iX_UserCampus_CampusIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserCampus_CampusIdIx).Add(iX_UserCampus_CampusId);
            userCampusTable.Indexes.Add("IX_UserCampus_CampusId", iX_UserCampus_CampusId);
            var iX_UserCampus_UserId = new TableIndex(
            "IX_UserCampus_UserId", userCampusTable, new[] { userIdColumn }, false);
            var iX_UserCampus_UserIdIx = RelationalModel.GetIndex(this,
                "DataBase.Entities.UserCampus",
                new[] { "UserId" });
            iX_UserCampus_UserId.MappedIndexes.Add(iX_UserCampus_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserCampus_UserIdIx).Add(iX_UserCampus_UserId);
            userCampusTable.Indexes.Add("IX_UserCampus_UserId", iX_UserCampus_UserId);
            relationalModel.Tables.Add(("UserCampus", null), userCampusTable);
            var userCampusTableMapping = new TableMapping(userCampus, userCampusTable, true);
            userCampusTable.AddTypeMapping(userCampusTableMapping, false);
            tableMappings4.Add(userCampusTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, userCampus.FindProperty("Id")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(campusIdColumn, userCampus.FindProperty("CampusId")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn4, userCampus.FindProperty("CreatedAt")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn4, userCampus.FindProperty("CreatedBy")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn4, userCampus.FindProperty("IsDeleted")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn4, userCampus.FindProperty("ModifiedAt")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn4, userCampus.FindProperty("ModifiedBy")!, userCampusTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, userCampus.FindProperty("UserId")!, userCampusTableMapping);

            var userRole = FindEntityType("DataBase.Entities.UserRole")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            userRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var dataBaseEntitiesUserRoleTableBase = new TableBase("DataBase.Entities.UserRole", null, relationalModel);
            var createdAtColumnBase5 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("CreatedAt", createdAtColumnBase5);
            var createdByColumnBase5 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("CreatedBy", createdByColumnBase5);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("Id", idColumnBase5);
            var isDeletedColumnBase5 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("IsDeleted", isDeletedColumnBase5);
            var modifiedAtColumnBase5 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase5);
            var modifiedByColumnBase5 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase5);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "uniqueidentifier", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("RoleId", roleIdColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "uniqueidentifier", dataBaseEntitiesUserRoleTableBase);
            dataBaseEntitiesUserRoleTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("DataBase.Entities.UserRole", dataBaseEntitiesUserRoleTableBase);
            var dataBaseEntitiesUserRoleMappingBase = new TableMappingBase<ColumnMappingBase>(userRole, dataBaseEntitiesUserRoleTableBase, true);
            dataBaseEntitiesUserRoleTableBase.AddTypeMapping(dataBaseEntitiesUserRoleMappingBase, false);
            defaultTableMappings5.Add(dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, userRole.FindProperty("Id")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase5, userRole.FindProperty("CreatedAt")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase5, userRole.FindProperty("CreatedBy")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase5, userRole.FindProperty("IsDeleted")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase5, userRole.FindProperty("ModifiedAt")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase5, userRole.FindProperty("ModifiedBy")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, userRole.FindProperty("RoleId")!, dataBaseEntitiesUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, userRole.FindProperty("UserId")!, dataBaseEntitiesUserRoleMappingBase);

            var tableMappings5 = new List<TableMapping>();
            userRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var userRoleTable = new Table("UserRole", null, relationalModel);
            var idColumn5 = new Column("Id", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("Id", idColumn5);
            var createdAtColumn5 = new Column("CreatedAt", "datetime2", userRoleTable);
            userRoleTable.Columns.Add("CreatedAt", createdAtColumn5);
            var createdByColumn5 = new Column("CreatedBy", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("CreatedBy", createdByColumn5);
            var isDeletedColumn5 = new Column("IsDeleted", "bit", userRoleTable);
            userRoleTable.Columns.Add("IsDeleted", isDeletedColumn5);
            var modifiedAtColumn5 = new Column("ModifiedAt", "datetime2", userRoleTable);
            userRoleTable.Columns.Add("ModifiedAt", modifiedAtColumn5);
            var modifiedByColumn5 = new Column("ModifiedBy", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("ModifiedBy", modifiedByColumn5);
            var roleIdColumn = new Column("RoleId", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("RoleId", roleIdColumn);
            var userIdColumn0 = new Column("UserId", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("UserId", userIdColumn0);
            var pK_UserRole = new UniqueConstraint("PK_UserRole", userRoleTable, new[] { idColumn5 });
            userRoleTable.PrimaryKey = pK_UserRole;
            var pK_UserRoleUc = RelationalModel.GetKey(this,
                "DataBase.Entities.UserRole",
                new[] { "Id" });
            pK_UserRole.MappedKeys.Add(pK_UserRoleUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserRoleUc).Add(pK_UserRole);
            userRoleTable.UniqueConstraints.Add("PK_UserRole", pK_UserRole);
            var iX_UserRole_RoleId = new TableIndex(
            "IX_UserRole_RoleId", userRoleTable, new[] { roleIdColumn }, false);
            var iX_UserRole_RoleIdIx = RelationalModel.GetIndex(this,
                "DataBase.Entities.UserRole",
                new[] { "RoleId" });
            iX_UserRole_RoleId.MappedIndexes.Add(iX_UserRole_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserRole_RoleIdIx).Add(iX_UserRole_RoleId);
            userRoleTable.Indexes.Add("IX_UserRole_RoleId", iX_UserRole_RoleId);
            var iX_UserRole_UserId = new TableIndex(
            "IX_UserRole_UserId", userRoleTable, new[] { userIdColumn0 }, false);
            var iX_UserRole_UserIdIx = RelationalModel.GetIndex(this,
                "DataBase.Entities.UserRole",
                new[] { "UserId" });
            iX_UserRole_UserId.MappedIndexes.Add(iX_UserRole_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserRole_UserIdIx).Add(iX_UserRole_UserId);
            userRoleTable.Indexes.Add("IX_UserRole_UserId", iX_UserRole_UserId);
            relationalModel.Tables.Add(("UserRole", null), userRoleTable);
            var userRoleTableMapping = new TableMapping(userRole, userRoleTable, true);
            userRoleTable.AddTypeMapping(userRoleTableMapping, false);
            tableMappings5.Add(userRoleTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, userRole.FindProperty("Id")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn5, userRole.FindProperty("CreatedAt")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn5, userRole.FindProperty("CreatedBy")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn5, userRole.FindProperty("IsDeleted")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn5, userRole.FindProperty("ModifiedAt")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn5, userRole.FindProperty("ModifiedBy")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, userRole.FindProperty("RoleId")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, userRole.FindProperty("UserId")!, userRoleTableMapping);
            var fK_CategoryDetails_Category_CategoryId = new ForeignKeyConstraint(
                "FK_CategoryDetails_Category_CategoryId", categoryDetailsTable, categoryTable,
                new[] { categoryIdColumn },
                categoryTable.FindUniqueConstraint("PK_Category")!, ReferentialAction.Cascade);
            var fK_CategoryDetails_Category_CategoryIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Entities.CategoryDetails",
                new[] { "CategoryId" },
                "DataBase.Entities.Category",
                new[] { "Id" });
            fK_CategoryDetails_Category_CategoryId.MappedForeignKeys.Add(fK_CategoryDetails_Category_CategoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CategoryDetails_Category_CategoryIdFk).Add(fK_CategoryDetails_Category_CategoryId);
            categoryDetailsTable.ForeignKeyConstraints.Add(fK_CategoryDetails_Category_CategoryId);
            categoryTable.ReferencingForeignKeyConstraints.Add(fK_CategoryDetails_Category_CategoryId);
            var fK_UserCampus_Campus_CampusId = new ForeignKeyConstraint(
                "FK_UserCampus_Campus_CampusId", userCampusTable, campusTable,
                new[] { campusIdColumn },
                campusTable.FindUniqueConstraint("PK_Campus")!, ReferentialAction.Cascade);
            var fK_UserCampus_Campus_CampusIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Entities.UserCampus",
                new[] { "CampusId" },
                "DataBase.Entities.Campus",
                new[] { "Id" });
            fK_UserCampus_Campus_CampusId.MappedForeignKeys.Add(fK_UserCampus_Campus_CampusIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserCampus_Campus_CampusIdFk).Add(fK_UserCampus_Campus_CampusId);
            userCampusTable.ForeignKeyConstraints.Add(fK_UserCampus_Campus_CampusId);
            campusTable.ReferencingForeignKeyConstraints.Add(fK_UserCampus_Campus_CampusId);
            var fK_UserCampus_User_UserId = new ForeignKeyConstraint(
                "FK_UserCampus_User_UserId", userCampusTable, userTable,
                new[] { userIdColumn },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_UserCampus_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Entities.UserCampus",
                new[] { "UserId" },
                "DataBase.Entities.User",
                new[] { "Id" });
            fK_UserCampus_User_UserId.MappedForeignKeys.Add(fK_UserCampus_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserCampus_User_UserIdFk).Add(fK_UserCampus_User_UserId);
            userCampusTable.ForeignKeyConstraints.Add(fK_UserCampus_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_UserCampus_User_UserId);
            var fK_UserRole_Role_RoleId = new ForeignKeyConstraint(
                "FK_UserRole_Role_RoleId", userRoleTable, roleTable,
                new[] { roleIdColumn },
                roleTable.FindUniqueConstraint("PK_Role")!, ReferentialAction.Cascade);
            var fK_UserRole_Role_RoleIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Entities.UserRole",
                new[] { "RoleId" },
                "DataBase.Entities.Role",
                new[] { "Id" });
            fK_UserRole_Role_RoleId.MappedForeignKeys.Add(fK_UserRole_Role_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserRole_Role_RoleIdFk).Add(fK_UserRole_Role_RoleId);
            userRoleTable.ForeignKeyConstraints.Add(fK_UserRole_Role_RoleId);
            roleTable.ReferencingForeignKeyConstraints.Add(fK_UserRole_Role_RoleId);
            var fK_UserRole_User_UserId = new ForeignKeyConstraint(
                "FK_UserRole_User_UserId", userRoleTable, userTable,
                new[] { userIdColumn0 },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_UserRole_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Entities.UserRole",
                new[] { "UserId" },
                "DataBase.Entities.User",
                new[] { "Id" });
            fK_UserRole_User_UserId.MappedForeignKeys.Add(fK_UserRole_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserRole_User_UserIdFk).Add(fK_UserRole_User_UserId);
            userRoleTable.ForeignKeyConstraints.Add(fK_UserRole_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_UserRole_User_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
